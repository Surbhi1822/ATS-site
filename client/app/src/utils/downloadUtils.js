/**
 * Utility functions for downloading filtered results
 */

/**
 * Create CSV content with proper escaping
 * @param {Array} results - Array of result objects
 * @param {boolean} includeKeywords - Whether to include matched keywords
 * @returns {string} - CSV formatted string
 */
export const createCSVContent = (results, includeKeywords = false) => {
  const headers = includeKeywords 
    ? ["Resume Name", "Overall Score", "Keyword Score", "Semantic Score", "Matched Keywords"]
    : ["Resume Name", "Overall Score", "Keyword Score", "Semantic Score"];
  
  const csvRows = [
    headers.join(","),
    ...results.map(result => [
      `"${result.resume.replace(/"/g, '""')}"`,
      result.score,
      result.keywordScore,
      result.semanticScore,
      ...(includeKeywords ? [`"${(result.matchedKeywords || []).join(', ').replace(/"/g, '""')}"`] : [])
    ].join(","))
  ];
  
  return csvRows.join("\n");
};

/**
 * Download results as CSV file
 * @param {Array} results - Results to download
 * @param {string} filename - Name of the file
 * @param {boolean} includeKeywords - Whether to include matched keywords
 */
export const downloadCSV = (results, filename, includeKeywords = false) => {
  if (!results || results.length === 0) {
    console.warn("No data to download");
    return;
  }

  const csvContent = "\uFEFF" + createCSVContent(results, includeKeywords); // Add BOM for Excel
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement("a");
  
  link.href = url;
  link.download = filename.endsWith('.csv') ? filename : `${filename}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};

/**
 * Download comprehensive analysis report
 * @param {Array} results - All results
 * @param {Array} filtered - Filtered results
 * @param {string} jobRole - Job role
 * @param {number} minScore - Minimum score threshold
 */
export const downloadAnalysisReport = (results, filtered, jobRole, minScore) => {
  if (!results || results.length === 0) {
    console.warn("No data to generate report");
    return;
  }

  const totalResumes = results.length;
  const qualifiedResumes = filtered.length;
  const averageScore = Math.round(results.reduce((sum, r) => sum + r.score, 0) / totalResumes);
  const topScore = Math.max(...results.map(r => r.score));
  const bottomScore = Math.min(...results.map(r => r.score));
  
  const reportContent = `
ATS RESUME ANALYSIS REPORT
=========================

Analysis Date: ${new Date().toLocaleDateString()}
Job Role: ${jobRole}
Minimum Score Threshold: ${minScore}%

SUMMARY STATISTICS
-----------------
Total Resumes Analyzed: ${totalResumes}
Qualified Resumes: ${qualifiedResumes}
Qualification Rate: ${totalResumes > 0 ? Math.round((qualifiedResumes / totalResumes) * 100) : 0}%
Average Score: ${averageScore}%
Highest Score: ${topScore}%
Lowest Score: ${bottomScore}%

DETAILED RESULTS
---------------
${results.map((result, index) => 
  `${index + 1}. ${result.resume} - ${result.score}%`
).join('\n')}

QUALIFIED CANDIDATES (Score >= ${minScore}%)
-------------------
${filtered.map((result, index) => 
  `${index + 1}. ${result.resume} - ${result.score}%`
).join('\n')}

---
Report generated by ATS System
${new Date().toISOString()}
`;

  const blob = new Blob([reportContent], { type: "text/plain" });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement("a");
  
  link.href = url;
  link.download = `ats_analysis_report_${jobRole.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};